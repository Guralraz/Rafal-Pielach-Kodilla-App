-- CREATE BOOKS_AUD
CREATE TABLE BOOKS_AUD
(
    EVENT_ID       INT(11)  NOT NULL AUTO_INCREMENT,
    EVENT_DATE     DATETIME NOT NULL,
    EVENT_TYPE     VARCHAR(10)  DEFAULT NULL,
    BOOK_ID        INT(11)  NOT NULL,
    OLD_TITLE      VARCHAR(255) DEFAULT NULL,
    NEW_TITLE      VARCHAR(255) DEFAULT NULL,
    OLD_PUBYEAR_ID INT(11),
    NEW_PUBYEAR_ID INT(11),
    OLD_BESTSELLER TINYINT(1),
    NEW_BESTSELLER TINYINT(1),
    PRIMARY KEY (EVENT_ID)
);

-- CREATE READERS_AUD
CREATE TABLE READERS_AUD
(
    EVENT_ID      INT(11)  NOT NULL AUTO_INCREMENT,
    EVENT_DATE    DATETIME NOT NULL,
    EVENT_TYPE    VARCHAR(10)  DEFAULT NULL,
    READER_ID     INT(11)  NOT NULL,
    OLD_FIRSTNAME VARCHAR(255) DEFAULT NULL,
    NEW_FIRSTNAME VARCHAR(255) DEFAULT NULL,
    OLD_LASTNAME  VARCHAR(255) DEFAULT NULL,
    NEW_LASTNAME  VARCHAR(255) DEFAULT NULL,
    OLD_PESEL_ID  VARCHAR(11),
    NEW_PESEL_ID  VARCHAR(11),
    OLD_VIP_LEVEL VARCHAR(20),
    NEW_VIP_LEVEL VARCHAR(20),
    PRIMARY KEY (EVENT_ID)
);

-- Creating trigger BOOKS_UPDATE
DELIMITER $$
CREATE TRIGGER BOOKS_UPDATE
    AFTER UPDATE
    ON BOOKS
    FOR EACH ROW
BEGIN
    INSERT INTO BOOKS_AUD (EVENT_DATE, EVENT_TYPE, BOOK_ID, NEW_TITLE, NEW_PUBYEAR_ID, NEW_BESTSELLER,
                           OLD_TITLE, OLD_PUBYEAR_ID, OLD_BESTSELLER)
        VALUE (CURTIME(), "UPDATE", NEW.BOOK_ID, NEW.TITLE, NEW.PUBYEAR,
               NEW.BESTSELLER, OLD.TITLE, OLD.PUBYEAR, OLD.BESTSELLER);
END $$
DELIMITER ;

-- Creating trigger BOOKS_INSERT
DELIMITER $$
CREATE TRIGGER BOOKS_INSERT
    AFTER INSERT
    ON BOOKS
    FOR EACH ROW
BEGIN
    INSERT INTO BOOKS_AUD (EVENT_DATE, EVENT_TYPE, BOOK_ID, NEW_TITLE, NEW_PUBYEAR_ID, NEW_BESTSELLER)
        VALUE (CURTIME(), "INSERT", NEW.BOOK_ID, NEW.TITLE, NEW.PUBYEAR,
               NEW.BESTSELLER);
END $$
DELIMITER ;

-- Creating trigger BOOKS_DELETE
DELIMITER $$
CREATE TRIGGER BOOKS_DELETE
    AFTER DELETE
    ON BOOKS
    FOR EACH ROW
BEGIN
    INSERT INTO BOOKS_AUD (EVENT_DATE, EVENT_TYPE, BOOK_ID, NEW_TITLE, NEW_PUBYEAR_ID, NEW_BESTSELLER)
        VALUE (CURTIME(), "DELETE", NEW.BOOK_ID, NEW.TITLE, NEW.PUBYEAR,
               NEW.BESTSELLER);
END $$
DELIMITER ;

-- -------------------------------------------------------------------------------------------------

-- Creating trigger READERS_UPDATE
DELIMITER $$
CREATE TRIGGER READERS_UPDATE
    AFTER UPDATE
    ON READERS
    FOR EACH ROW
BEGIN
    INSERT INTO READERS_AUD (EVENT_DATE, EVENT_TYPE, READER_ID, NEW_FIRSTNAME, NEW_LASTNAME, NEW_PESEL_ID, NEW_VIP_LEVEL,
                             OLD_FIRSTNAME, OLD_LASTNAME, OLD_PESEL_ID, OLD_VIP_LEVEL)
        VALUE (CURTIME(), "UPDATE", NEW.READER_ID, NEW.FIRSTNAME, NEW.LASTNAME, NEW.PESELID, NEW.VIP_LEVEL,
               OLD.READER_ID, OLD.FIRSTNAME, OLD.LASTNAME, OLD.PESELID, OLD.VIP_LEVEL);
END $$
DELIMITER ;

-- Creating trigger READERS_INSERT
DELIMITER $$
CREATE TRIGGER READERS_INSERT
    AFTER UPDATE
    ON READERS
    FOR EACH ROW
BEGIN
    INSERT INTO READERS_AUD (EVENT_DATE, EVENT_TYPE, READER_ID, NEW_FIRSTNAME, NEW_LASTNAME, NEW_PESEL_ID, NEW_VIP_LEVEL)
        VALUE (CURTIME(), "INSERT", NEW.READER_ID, NEW.FIRSTNAME, NEW.LASTNAME, NEW.PESELID, NEW.VIP_LEVEL);
END $$
DELIMITER ;

-- Creating trigger READERS_DELETE
DELIMITER $$
CREATE TRIGGER READERS_DELETE
    AFTER UPDATE
    ON READERS
    FOR EACH ROW
BEGIN
    INSERT INTO READERS_AUD (EVENT_DATE, EVENT_TYPE, READER_ID, NEW_FIRSTNAME, NEW_LASTNAME, NEW_PESEL_ID, NEW_VIP_LEVEL)
        VALUE (CURTIME(), "DELETE", NEW.READER_ID, NEW.FIRSTNAME, NEW.LASTNAME, NEW.PESELID, NEW.VIP_LEVEL);
END $$
DELIMITER ;